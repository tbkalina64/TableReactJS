{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\TBKalina\\\\Desktop\\\\TableReactJS\\\\my-app\\\\src\\\\components\\\\Table.js\";\nimport React from 'react';\nimport TableTr from './TableTr'; // import './api-services';\n\nconst Table = () => {\n  class ApiClient {\n    constructor() {\n      this._apiData = 'https://jsonplaceholder.typicode.com';\n    }\n\n    async getResource(url) {\n      const response = await fetch(`${this._apiData}${url}`);\n\n      if (!response.ok) {\n        throw new Error(`Could not fetch  ${url}` + `, received ${response.status}`);\n      }\n\n      return await response.json();\n    }\n\n    getAllUsers() {\n      return this.getResource(`/users/`);\n    }\n\n    getUser(id) {\n      return this.getResource(`/users/${id}`);\n    }\n\n  }\n\n  const apiUsers = new ApiClient();\n  apiUsers.getAllUsers().then(users => {\n    users.forEach(user => {\n      console.log(user.name);\n    });\n  }).catch(err => {\n    console.error('Could not fetch', err);\n  });\n\n  const renderHeader = () => {\n    let headerElement = ['id', 'name', 'email', 'phone', 'operation'];\n    return headerElement.map((key, index) => {\n      return /*#__PURE__*/_jsxDEV(\"th\", {\n        children: key.toUpperCase()\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 20\n      }, this);\n    });\n  };\n\n  const renderBody = () => {\n    return users && users.map(({\n      id,\n      name,\n      email,\n      phone\n    }) => {\n      return /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: phone\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          className: \"opration\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: () => removeData(id),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this)]\n      }, id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TableTr, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      id: \"employee\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: renderHeader()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: renderBody()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Table;\nexport default Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"sources":["C:/Users/TBKalina/Desktop/TableReactJS/my-app/src/components/Table.js"],"names":["React","TableTr","Table","ApiClient","_apiData","getResource","url","response","fetch","ok","Error","status","json","getAllUsers","getUser","id","apiUsers","then","users","forEach","user","console","log","name","catch","err","error","renderHeader","headerElement","map","key","index","toUpperCase","renderBody","email","phone","removeData"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport TableTr from './TableTr';\r\n// import './api-services';\r\n\r\nconst Table = () => {\r\n\r\n    class ApiClient {\r\n\r\n        _apiData = 'https://jsonplaceholder.typicode.com';\r\n    \r\n        async getResource(url) {\r\n            const response = await fetch(`${this._apiData}${url}`);\r\n    \r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch  ${url}` + `, received ${response.status}`);\r\n            }\r\n            return await response.json();\r\n        }\r\n        getAllUsers() {\r\n            return this.getResource(`/users/`);\r\n        }\r\n        getUser(id) {\r\n            return this.getResource(`/users/${id}`);\r\n        }\r\n    }\r\n    \r\n    const apiUsers = new ApiClient();\r\n    \r\n    apiUsers\r\n        .getAllUsers()\r\n        .then((users) => {\r\n            users.forEach((user) => {\r\n                console.log(user.name);\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            console.error('Could not fetch', err);\r\n        });\r\n    \r\n\r\n    const renderHeader = () => {\r\n        let headerElement = ['id', 'name', 'email', 'phone', 'operation']\r\n\r\n        return headerElement.map((key, index) => {\r\n            return <th key={index}>{key.toUpperCase()}</th>\r\n        })\r\n    }\r\n    \r\n    const renderBody = () => {\r\n        return users && users.map(({ id, name, email, phone }) => {\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{name}</td>\r\n                    <td>{email}</td>\r\n                    <td>{phone}</td>\r\n                    <td className='opration'>\r\n                        <button className='button' onClick={() => removeData(id)}>Delete</button>\r\n                    </td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <TableTr/>\r\n            <table id='employee'>\r\n                <thead>\r\n                    <tr>{renderHeader()}</tr>\r\n                </thead>\r\n                <tbody>\r\n                    {renderBody()}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Table;"]},"metadata":{},"sourceType":"module"}